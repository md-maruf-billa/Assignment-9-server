generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  reviews   Review[]
  comments  Comment[]
  votes     Vote[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id             String       @id @default(uuid())
  title          String
  description    String
  rating         Int          @default(0)
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryId     String
  purchaseSource String?
  isPremium      Boolean      @default(false)
  price          Int?
  images         String[]
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  status         ReviewStatus @default(PENDING)
  votes          Vote[]
  comments       Comment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Payment        Payment[]
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  reviews Review[]
}

model Vote {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String
  type      VoteType
  createdAt DateTime @default(now())

  @@unique([userId, reviewId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String
  createdAt DateTime @default(now())
}

model Payment {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  review    Review        @relation(fields: [reviewId], references: [id])
  reviewId  String
  amount    Int
  status    PaymentStatus
  createdAt DateTime      @default(now())
}

enum Role {
  USER
  ADMIN
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  UNPUBLISHED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}
