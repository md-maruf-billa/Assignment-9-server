generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  COMPANY
  ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Category {
  id            String    @id @default(uuid())
  categoryImage String
  name          String    @unique
  reviews       Review[]
  Product       Product[]
}

model Account {
  id                String          @id @default(uuid())
  email             String          @unique
  password          String
  role              Role
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  status            AccountStatus   @default(ACTIVE)
  isDeleted         Boolean         @default(false)
  isCompleteProfile Boolean         @default(false)
  isPremium         Boolean         @default(false)
  user              User?
  company           Company?
  admin             Admin?
  ReviewComment     ReviewComment[]
  payment           Payment?

  @@map("accounts")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  accountId    String   @unique
  account      Account  @relation(fields: [accountId], references: [id])
  profileImage String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)

  @@map("users")
}

model Company {
  id           String    @id @default(uuid())
  name         String?
  accountId    String    @unique
  account      Account   @relation(fields: [accountId], references: [id])
  products     Product[]
  website      String?
  companyImage String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean   @default(false)

  @@map("companies")
}

model Admin {
  id           String   @id @default(uuid())
  name         String?
  accountId    String   @unique
  account      Account  @relation(fields: [accountId], references: [id])
  profileImage String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)

  @@map("admins")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String?
  imageUrl    String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Review {
  id                   String            @id @default(uuid())
  title                String
  description          String
  rating               Int
  categoryId           String
  category             Category          @relation(fields: [categoryId], references: [id])
  productId            String?
  product              Product?          @relation(fields: [productId], references: [id])
  isPremium            Boolean           @default(false)
  reviewerName         String?
  reviewerEmail        String?
  reviewerProfilePhoto String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  isDeleted            Boolean           @default(false)
  ReviewComment        ReviewComment[]
  upVotes              Int               @default(0)
  downVotes            Int               @default(0)
  reviewEmailVotes     ReviewEmailVote[]

  @@map("reviews")
}

model ReviewComment {
  id        String   @id @default(uuid())
  reviewId  String
  accountId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])
  isDeleted Boolean  @default(false)

  @@map("review_comments")
}

model Payment {
  id        String  @id @default(uuid())
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])

  transactionId      String        @unique
  amount             Float
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isDeleted          Boolean       @default(false)

  @@map("payments")
}

enum PaymentStatus {
  PAID
  UNPAID
}

model Team {
  id           String   @id @default(uuid())
  name         String
  title        String
  profileImage String? // optional field
  description  String
  gitHub       String
  linkedIn     String
  facebook     String
  portfolio    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("teams")
}

model ReviewEmailVote {
  id        String   @id @default(uuid())
  reviewId  String
  email     String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id])

  @@unique([reviewId, email])
  @@map("review_email_votes")
}
